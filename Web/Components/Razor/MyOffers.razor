@page "/my-offers"
@using Web.Models
@using Web.Services
@using Microsoft.AspNetCore.Identity
@using Web.Data
@using System.IO
@inject SignInManager<User> SignInManager
@inject IOfferDataService OfferDataService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<br />
<br />
<br />
<br />
<MudContainer>
    @if (User == null)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <Virtualize Context="offer" ItemsProvider="@LoadOffers">
            <ItemContent>
                <MudGrid>
                    <MudItem xs="12" sm="2"></MudItem>
                    <MudItem sm="6" xs="12">
                        <MudCard Class="offer-content">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Color="Color.Primary">Date de publication: @offer.PublishDate</MudText>
                                    <MudText Color="Color.Primary">Type: @offer.Type</MudText>
                                    <MudText Color="Color.Primary">catégorie: @offer.Category</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudText Class="">@offer.TextContent</MudText>
                                <br />
                                @if (!string.IsNullOrEmpty(offer.ImageUrl1))
                                {
                                    <img alt="offer-@offer.Id" src="@offer.ImageUrl1" style="width:100%" />
                                }
                            </MudCardContent>
                            <MudCardActions>
                                @*<MudIconButton Color="Color.Primary" Icon="@Icons.Material.Rounded.Update" />*@
                                <MudIconButton OnClick="() => DeleteOffer(offer.Id, offer.ImageUrl1)" Color="Color.Error" Icon="@Icons.Material.Rounded.Delete" />
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </ItemContent>
            <Placeholder>
                <MudCard>
                    <MudCardContent>
                        <MudSkeleton>
                            <MudSkeleton SkeletonType="SkeletonType.Text" />
                            <MudSkeleton SkeletonType="SkeletonType.Text" />
                            <MudSkeleton SkeletonType="SkeletonType.Text" />
                        </MudSkeleton>
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton SkeletonType="SkeletonType.Circle" Width="64px" Height="40px" Class="ml-2" />
                        <MudSkeleton SkeletonType="SkeletonType.Circle" Width="105px" Height="40px" Class="ml-3" />
                    </MudCardActions>
                </MudCard>
            </Placeholder>
        </Virtualize>
    }
    <MudScrollToTop>
        <MudFab Color="Color.Primary" Icon="@Icons.Rounded.ArrowUpward" />
    </MudScrollToTop>
</MudContainer>

@code{
    private List<Web.Models.Offer> offers;
    private User User;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        User = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);
        //offers = await OfferDataService.GetOffersByUser(user.Id);
    }


    private async ValueTask<ItemsProviderResult<Web.Models.Offer>> LoadOffers(
        ItemsProviderRequest request)
    {
        offers = await OfferDataService.GetOffersByUser(User.Id, request.StartIndex, request.Count);
        return new ItemsProviderResult<Web.Models.Offer>(offers, offers.Count);
    }

    private async Task DeleteOffer(long offerId, string fileName)
    {
        var parameters = new DialogParameters { ["offerId"] = offerId };

        var dialog = DialogService.Show<DeleteOfferDialog>("Supprimer l'offre ?", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            if(!string.IsNullOrEmpty(fileName))
                File.Delete($".\\wwwroot\\{fileName}");
            OfferDataService.DeleteOffer(offerId);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            //Snackbar.Add("Offre supprimée avec succès", Severity.Success);
            NavigationManager.NavigateTo("/my-offers", true);
        }
    }
}